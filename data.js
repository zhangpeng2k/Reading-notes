(function () {
  var content = [{"context":[{"title":"介绍","link":"/index.html"}],"content":"\n        <h1 id=\"介绍\">\n            <a href='#介绍' class='header-anchor'>#</a>\n            <span>介绍</span>\n        </h1>\n    \n        <h2 id=\"什么是Teadocs？\">\n            <a href='#什么是Teadocs？' class='header-anchor'>#</a>\n            <span>什么是Teadocs？</span>\n        </h2>\n    <p>Teadocs 是一款能够帮你快速构建html文档的工具，它基于nodejs编写，并使用markdown来编写文档内容。</p>\n<p>Teadocs 提供内置的搜索技术，除了编写好你引以为豪的内容以外，你无需关注的任何额外的技术问题。</p>\n<p>你可以使用它来编写开源书籍、API文档学习、笔记、学习心得、甚至可以用来写博客。</p>\n\n        <h2 id=\"原理\">\n            <a href='#原理' class='header-anchor'>#</a>\n            <span>原理</span>\n        </h2>\n    <p>Teadocs 会自动根据你编写的markdown文档自动生成html文档，并且生成的html文档具备可复用、可移植等特性，可以部署在任何你喜欢的地方。</p>\n\n        <h2 id=\"贡献\">\n            <a href='#贡献' class='header-anchor'>#</a>\n            <span>贡献</span>\n        </h2>\n    <p>github地址：<a href=\"https://github.com/lisniuse/teadocs\">https://github.com/lisniuse/teadocs</a></p>\n<p>如果你想贡献代码，我们建议你先fork阅读Teadocs的源码，然后push你的idea。</p>\n"},{"context":[{"title":"读书笔记","link":"javascript:void(0)"},{"title":"JavaScript高级程序设计","link":"/books/Professional_JavaScript_for_Web.html"}],"content":"\n        <h1 id=\"JavaScript高级程序设计\">\n            <a href='#JavaScript高级程序设计' class='header-anchor'>#</a>\n            <span>JavaScript高级程序设计</span>\n        </h1>\n    \n        <h2 id=\"原作名：Professional-JavaScript-for-Web\">\n            <a href='#原作名：Professional-JavaScript-for-Web' class='header-anchor'>#</a>\n            <span>原作名：Professional JavaScript for Web</span>\n        </h2>\n    \n        <h2 id=\"\b目录\">\n            <a href='#\b目录' class='header-anchor'>#</a>\n            <span>\b目录</span>\n        </h2>\n    \n        <h3 id=\"第1章-JavaScript简介\">\n            <a href='#第1章-JavaScript简介' class='header-anchor'>#</a>\n            <span>第1章 JavaScript简介</span>\n        </h3>\n    \n        <h4 id=\"历史\">\n            <a href='#历史' class='header-anchor'>#</a>\n            <span>历史</span>\n        </h4>\n    <ul>\n<li>JavaScript是由xxx</li>\n</ul>\n\n        <h3 id=\"第2章-在HTML中使用JavaScript\">\n            <a href='#第2章-在HTML中使用JavaScript' class='header-anchor'>#</a>\n            <span>第2章 在HTML中使用JavaScript</span>\n        </h3>\n    \n        <h3 id=\"第3章-基本概念\">\n            <a href='#第3章-基本概念' class='header-anchor'>#</a>\n            <span>第3章 基本概念</span>\n        </h3>\n    \n        <h3 id=\"第4章-继承\">\n            <a href='#第4章-继承' class='header-anchor'>#</a>\n            <span>第4章 继承</span>\n        </h3>\n    \n        <h3 id=\"第5章-浏览器中的JavaScript\">\n            <a href='#第5章-浏览器中的JavaScript' class='header-anchor'>#</a>\n            <span>第5章 浏览器中的JavaScript</span>\n        </h3>\n    \n        <h3 id=\"第6章-DOM基础\">\n            <a href='#第6章-DOM基础' class='header-anchor'>#</a>\n            <span>第6章 DOM基础</span>\n        </h3>\n    \n        <h3 id=\"第7章-正则表达式\">\n            <a href='#第7章-正则表达式' class='header-anchor'>#</a>\n            <span>第7章 正则表达式</span>\n        </h3>\n    \n        <h3 id=\"第8章-检测浏览器和操作系统\">\n            <a href='#第8章-检测浏览器和操作系统' class='header-anchor'>#</a>\n            <span>第8章 检测浏览器和操作系统</span>\n        </h3>\n    \n        <h3 id=\"第9章-事件\">\n            <a href='#第9章-事件' class='header-anchor'>#</a>\n            <span>第9章 事件</span>\n        </h3>\n    \n        <h3 id=\"第10章-高级DOM技术\">\n            <a href='#第10章-高级DOM技术' class='header-anchor'>#</a>\n            <span>第10章 高级DOM技术</span>\n        </h3>\n    \n        <h3 id=\"第11章-表单和数据完整性\">\n            <a href='#第11章-表单和数据完整性' class='header-anchor'>#</a>\n            <span>第11章 表单和数据完整性</span>\n        </h3>\n    \n        <h3 id=\"第12章-表格排序\">\n            <a href='#第12章-表格排序' class='header-anchor'>#</a>\n            <span>第12章 表格排序</span>\n        </h3>\n    \n        <h3 id=\"第13章-拖放\">\n            <a href='#第13章-拖放' class='header-anchor'>#</a>\n            <span>第13章 拖放</span>\n        </h3>\n    \n        <h3 id=\"第14章-错误处理\">\n            <a href='#第14章-错误处理' class='header-anchor'>#</a>\n            <span>第14章 错误处理</span>\n        </h3>\n    \n        <h3 id=\"第15章-JavaScript中的XML\">\n            <a href='#第15章-JavaScript中的XML' class='header-anchor'>#</a>\n            <span>第15章 JavaScript中的XML</span>\n        </h3>\n    \n        <h3 id=\"第16章-客户端与服务器端的通信\">\n            <a href='#第16章-客户端与服务器端的通信' class='header-anchor'>#</a>\n            <span>第16章 客户端与服务器端的通信</span>\n        </h3>\n    \n        <h3 id=\"第17章-Web服务\">\n            <a href='#第17章-Web服务' class='header-anchor'>#</a>\n            <span>第17章 Web服务</span>\n        </h3>\n    \n        <h3 id=\"第18章-与插件进行交互\">\n            <a href='#第18章-与插件进行交互' class='header-anchor'>#</a>\n            <span>第18章 与插件进行交互</span>\n        </h3>\n    \n        <h3 id=\"第19章-部署问题\">\n            <a href='#第19章-部署问题' class='header-anchor'>#</a>\n            <span>第19章 部署问题</span>\n        </h3>\n    \n        <h3 id=\"第20章-JavaScript的未来\">\n            <a href='#第20章-JavaScript的未来' class='header-anchor'>#</a>\n            <span>第20章 JavaScript的未来</span>\n        </h3>\n    <!-- \n- 出版社：电子工业出版社\n- 作者：李笑来\n- 版次：2013年10月第3版\n- 阅读于：2020年02月05日-2020年02月08日\n- 阅读来源：kindle\n- 推荐阅读：✨✨✨\n- 之所以给3星，是因为书后面几章节说的道理太多，不能否认这些道理可能很有用，但没有经历过一些事无法像作者理解的那般通透。读此书带来的收益是更加了解自己，自己简直就是书中很多反面例子的代表人物，之前却一直不自知，身上的毛病得先认识到，才能谈矫正，这一点颇有收获。 -->"},{"context":[{"title":"读书笔记","link":"javascript:void(0)"},{"title":"图解HTTP","link":"/books/http.html"}],"content":"\n        <h1 id=\"图解HTTP\">\n            <a href='#图解HTTP' class='header-anchor'>#</a>\n            <span>图解HTTP</span>\n        </h1>\n    \n        <h2 id=\"原作名：图解HTTP\">\n            <a href='#原作名：图解HTTP' class='header-anchor'>#</a>\n            <span>原作名：图解HTTP</span>\n        </h2>\n    \n        <h2 id=\"\b目录\">\n            <a href='#\b目录' class='header-anchor'>#</a>\n            <span>\b目录</span>\n        </h2>\n    "},{"context":[{"title":"学习笔记","link":"javascript:void(0)"},{"title":"提前体验Vue3","link":"/notes/vue3.html"}],"content":"\n        <h1 id=\"Vue3-(alpha)-预习\">\n            <a href='#Vue3-(alpha)-预习' class='header-anchor'>#</a>\n            <span>Vue3 (alpha) 预习</span>\n        </h1>\n    <p>在本篇笔记中，我记录并学习 <code>Vue3</code> 的新语法，以及使用 <code>Vue3</code> 尝试做一个简单的 TodoList 应用。（别骂了别骂了</p>\n\n        <h2 id=\"前言\">\n            <a href='#前言' class='header-anchor'>#</a>\n            <span>前言</span>\n        </h2>\n    <p>本来 Evan you 说2019年就要发布 <code>Vue3</code> 的正式版。然鹅新冠病毒肺炎<code>COVID-19</code>的突然出现，好像给了大家一个咕咕咕的理由...</p>\n\n        <h3 id=\"先说体验结果\">\n            <a href='#先说体验结果' class='header-anchor'>#</a>\n            <span>先说体验结果</span>\n        </h3>\n    <p>除了把<code>Object.definedProperty</code>替换为<code>Proxy</code>，带来的对象属性监听能力以外，并没有什么很香的地方。</p>\n<p>确实解决了对象属性监听这个问题，以及在某些情况下更好的性能优化。但新功能太过于像 <code>React</code> 以至于我体验了 <code>Vue3</code> 之后打算去好好学学 <code>React</code> 了...</p>\n<p>其他更强大的新功能也带来了更自由的写法，我认为在 <code>Vue3</code> 上线后，仍然会有公司选择 <code>Vue2</code> 或者\b更新到 <code>Vue3</code> 接着使用 <code>Vue2</code> 写法。</p>\n<p>因为更自由的写法，也带来了更高的沟通成本，以后一样需要和 <code>React</code> 一样，使用<code>TypeScirt</code>和<code>eslint</code>，或协作文档等等来解决代码风格问题。</p>\n\n        <h2 id=\"克隆官方仓库\">\n            <a href='#克隆官方仓库' class='header-anchor'>#</a>\n            <span>克隆官方仓库</span>\n        </h2>\n    <p>克隆官方预览仓库<code>vue-next-webpack-preview</code></p>\n<pre class=\"prettyprint language-sh\"><code>git clone https://github.com/vuejs/vue-next-webpack-preview.git\n\ncd vue-next-webpack-preview\n\nnpm i\n\nnpm run dev</code></pre><p>待更新</p>\n"},{"context":[{"title":"健身日记","link":"javascript:void(0)"},{"title":"开始！2020","link":"/bodybuilding/Before_Start.html"}],"content":"\n        <h1 id=\"Before-Start-开始之前\">\n            <a href='#Before-Start-开始之前' class='header-anchor'>#</a>\n            <span>Before Start 开始之前</span>\n        </h1>\n    \n        <h2 id=\"这之前\">\n            <a href='#这之前' class='header-anchor'>#</a>\n            <span>这之前</span>\n        </h2>\n    <p>我2017年的身材是 183CM 63KG 左右。刚去健身房测得体脂是3%，感觉有点夸张，不过确实瘦的不行。</p>\n<p>在2017年-2018年期间，断断续续地和我哥在家附近的健身房练了一段日子，称得上稍有成果吧。（虽然大多数时间都是把健身卡当做洗澡卡</p>\n<p>增重了5KG，而且胸部和背部的肌肉也稍微能看见一点了。得益于此，整个人看上去很挺拔，精神状态也很不错。</p>\n<p>期间掌握了健身房各种器械的使用，体会过深蹲，卧推，以及肩部背部的一些肌肉感受。</p>\n<p>这段时间的成果确实很不错！不过随着我哥去搬出去之后，我去健身房的频率也有所下降，\b而且健身卡也快过期了，最后也没有续费。</p>\n<p>办健身年卡的钱是哥哥掏的0.0 当时自己掏不出钱是一方面，另一方面也是懒惰了。欺骗自己说在家练也一样，结果再也没练过...</p>\n\n        <h2 id=\"重启\">\n            <a href='#重启' class='header-anchor'>#</a>\n            <span>重启</span>\n        </h2>\n    <blockquote>\n<p>2020年05月18日</p>\n</blockquote>\n<p>两年过去了，\b我虽然没靠工作攒下来什么钱，但身体毛病倒是攒了不少...</p>\n<p>驼背，视力下降，颈椎、腰椎的毛病等等，8小时久坐 + 高强度打游戏对身体的消耗，让我之前的健身成果（吃老底）几乎完全木大。甚至不如往日...</p>\n<p>今天看到了 Randy 大佬的 Blog 中他健身的经历，我又突然想起了尘封数月的 2020 心愿清单。</p>\n<p><img src=\"http://images.zhangpeng2k.com/img/WeChat1a30f119f13cf52607b0a5dba2ac311e.png\" alt=\"TodoList的截图-2020年心愿\"></p>\n<p>虽然疫情影响了健身房，但实际上并不影响我在家健身，过年居家隔离的这些日子里还是沉迷游戏...和番剧。哪怕隔离期间没有windows电脑，一整天除了吃饭就是躺着床上玩手游或者 MacOS 玩 Steam 游戏。</p>\n<p>最近工作稳定地早九晚六，几乎不加班，而我下班和周末几乎完全沉迷打游戏...而且还是竞技类为主，无底线的沉迷。这显然不健康，也毫无用处。</p>\n<p>我确实很喜欢游戏，不过对于如 <code>CS:GO OverWatch LOL</code> 这类竞技类游戏...我很明白，在这类没有剧情、自己游戏的水平也一般的游戏里。在这类称不上艺术，也称不上竞技的游戏中投入如此大量的时间纯属浪费。</p>\n<p>这样的日子很久了，真的很消磨人的意志，在一个个写满了周末计划的周末中仍然沉迷游戏。回想自己每个周末，既没有内容产出，也没有学习，加上换工作并不顺利，焦虑几乎快把我压倒，而我面对焦虑却又再次不由自主地玩游戏逃避...这几乎是个无底洞，现在回想起来，仍然让我捶胸顿足，浪费了如此多的时间，如果早点醒悟该多好...</p>\n<p>后悔并没有什么用，重要的是把握好这来之不易的，稳定的（暂时） 965 工作时间。重新利用这段时间做一些有意义的事情！</p>\n<p>奔涌吧，非浪！🐎</p>\n\n        <h2 id=\"其他\">\n            <a href='#其他' class='header-anchor'>#</a>\n            <span>其他</span>\n        </h2>\n    <p>关于工作方面，其实没有太多想法了，这次跳槽遇到困难也让我反思起自己的职业规划：“在选择公司之前我都做了什么？”，”学历这个客观问题应该如何解决？”。关于这些问题，希望自己能通过阅读：《你的降落伞是什么颜色？》、《软技能：代码之外的生存指南》等书籍，来为这些问题给出自己的答案。</p>\n"},{"context":[{"title":"快速入门","link":"/quick_start.html"}],"content":"\n        <h1 id=\"快速入门\">\n            <a href='#快速入门' class='header-anchor'>#</a>\n            <span>快速入门</span>\n        </h1>\n    \n        <h2 id=\"安装它\">\n            <a href='#安装它' class='header-anchor'>#</a>\n            <span>安装它</span>\n        </h2>\n    <p>需要nodejs版本 &gt;= 8.0，npm 版本 &gt; 3.</p>\n<pre class=\"prettyprint\"><code>$ npm install -g teadocs</code></pre>\n        <h2 id=\"使用它\">\n            <a href='#使用它' class='header-anchor'>#</a>\n            <span>使用它</span>\n        </h2>\n    \n        <h3 id=\"第一步\">\n            <a href='#第一步' class='header-anchor'>#</a>\n            <span>第一步</span>\n        </h3>\n    <p>初始化一个文档项目</p>\n<pre class=\"prettyprint\"><code>$ teadcos init mydocs</code></pre>\n        <h3 id=\"第二步\">\n            <a href='#第二步' class='header-anchor'>#</a>\n            <span>第二步</span>\n        </h3>\n    <p>进入这个文档目录</p>\n<pre class=\"prettyprint\"><code>$ cd mydocs</code></pre>\n        <h3 id=\"第三步\">\n            <a href='#第三步' class='header-anchor'>#</a>\n            <span>第三步</span>\n        </h3>\n    <p>此步骤是进入文档编辑模式（开发模式），此模式将监视markdown文件的变化，实时热替换html页面。</p>\n<pre class=\"prettyprint\"><code>$ teadocs dev</code></pre>\n        <h3 id=\"自动生成项目初始结构\">\n            <a href='#自动生成项目初始结构' class='header-anchor'>#</a>\n            <span>自动生成项目初始结构</span>\n        </h3>\n    <p>如果你想偷懒，那么你可以在编写好tree.md（菜单的配置文件）的情况下，直接运行以下命令，teadocs可以自动帮你生成md文件。</p>\n<pre class=\"prettyprint\"><code>$ teadocs init</code></pre>\n        <h3 id=\"编译成html\">\n            <a href='#编译成html' class='header-anchor'>#</a>\n            <span>编译成html</span>\n        </h3>\n    <pre class=\"prettyprint\"><code>$ teadocs build</code></pre>"},{"context":[{"title":"安装","link":"/install.html"}],"content":"\n        <h1 id=\"安装\">\n            <a href='#安装' class='header-anchor'>#</a>\n            <span>安装</span>\n        </h1>\n    \n        <h2 id=\"installation\">\n            <a href='#installation' class='header-anchor'>#</a>\n            <span>installation</span>\n        </h2>\n    <p>安装非常的简单，需要安装到全局中，方便随时通过shell调用。</p>\n<p>需要nodejs版本 &gt;= 8.0，npm 版本 &gt; 3.</p>\n<p>安装命令如下：</p>\n<pre class=\"prettyprint\"><code>$ npm install -g teadocs</code></pre>"},{"context":[{"title":"配置介绍","link":"javascript:void(0)"},{"title":"文档目录结构介绍","link":"/config/structure.html"}],"content":"\n        <h1 id=\"文档目录结构介绍\">\n            <a href='#文档目录结构介绍' class='header-anchor'>#</a>\n            <span>文档目录结构介绍</span>\n        </h1>\n    <pre class=\"prettyprint\"><code>testdocs\n├─ build  #这个是编译输出的目录\n│    ├─ config\n│    │    ├─ main.html\n│    │    ├─ nav.html\n│    │    └─ structure.html\n│    ├─ custom_theme.html\n│    ├─ data.js\n│    ├─ deploy.html\n│    ├─ index.html\n│    ├─ install.html\n│    ├─ quick_start.html\n│    ├─ static\n│    │    ├─ css\n│    │    ├─ font-awesome-4.7.0\n│    │    ├─ fonts\n│    │    ├─ images\n│    │    └─ js\n│    └─ template_markdown.html\n├─ docs #这个是文档的源文件目录，也就是markdown文件目录。\n│    ├─ config\n│    │    ├─ main.md\n│    │    ├─ nav.md\n│    │    └─ structure.md\n│    ├─ custom_theme.md\n│    ├─ deploy.md\n│    ├─ index.md\n│    ├─ install.md\n│    ├─ quick_start.md\n│    └─ template_markdown.md\n├─ static # 这个地方是用于存放文档中需要用要的静态文件，例如图片等，它会自动copy到build目录下。\n|\n├─ teadocs.config.js # 这是teadocs的主配置文件\n└─ tree.html # 这是文档的菜单配置文件</code></pre>"},{"context":[{"title":"配置介绍","link":"javascript:void(0)"},{"title":"主配置文件说明","link":"/config/main.html"}],"content":"\n        <h1 id=\"主配置文件说明\">\n            <a href='#主配置文件说明' class='header-anchor'>#</a>\n            <span>主配置文件说明</span>\n        </h1>\n    <p>菜单的配置文件是你文档根目录下面的 <code>teadocs.config.js</code>，它是一个javascript的文件。</p>\n<p>主配置文件的所有配置项都不是必填你完全可以什么也不填写，它的代码如下：</p>\n<pre class=\"prettyprint language-javascript\"><code>&#039;use strict&#039;;\nconst path = require(&#039;path&#039;)\n\nmodule.exports = {\n    doc: {\n        name: &quot;&quot;, //文档名称\n        description: &quot;&quot;, //文档的描述\n        version: &quot;&quot;, //文档的版本\n        dir: &quot;&quot;, //文档的目录\n        outDir: &quot;&quot;, //文档编译成html时输出的目录\n        staticDir: &quot;&quot; //文档所用到的静态文件的地址\n    }, \n    theme: {\n        dir: &quot;&quot;, //主题的目录，可自定义主题\n        title: &quot;&quot;, //html的title标签\n        headHtml: &quot;&quot;, //html head 的代码\n        footHtml: &quot;&quot;, //html 底部 的代码\n        isMinify: true, //是否为输出的html启用压缩\n        rootPath: &quot;/&quot; //表示根路径，如果部署在深目录下面，这个配置项必填，不然会出现找不到资源路径的错误。\n    },\n    nav: {\n        tree: &quot;./tree&quot;\n    }\n}</code></pre>\n        <h2 id=\"默认配置\">\n            <a href='#默认配置' class='header-anchor'>#</a>\n            <span>默认配置</span>\n        </h2>\n    <pre class=\"prettyprint language-javascript\"><code>module.exports = {\n    doc: {\n        name: &quot;欢迎使用Teadocs文档生成系统&quot;,\n        description: &quot;欢迎使用Teadocs文档生成系统&quot;,\n        version: &quot;0.0.1&quot;,\n        dir: &quot;./docs&quot;,\n        outDir: &quot;./build&quot;,\n        staticDir: &quot;./static&quot;\n    },\n    theme: {\n        dir: __dirname + &#039;/../themes/default&#039;,\n        title: &quot;欢迎使用Teadocs文档生成系统&quot;,\n        headHtml: `\n        &amp;lt;meta name=&quot;description&quot; content=&quot;欢迎使用Teadocs文档生成系统&quot; /&amp;gt;\n        &amp;lt;meta name=&quot;keywords&quot; content=&quot;teadocs, 文档生成器&quot; /&amp;gt;\n        `,\n        footerHtml: &quot;&quot;,\n        isMinify: false,\n        rootPath: &quot;/&quot;\n    },\n    nav: {\n        tree: &quot;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a&amp;gt;欢迎使用Teadocs文档生成系统&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&quot;\n    }\n}</code></pre>"},{"context":[{"title":"配置介绍","link":"javascript:void(0)"},{"title":"菜单配置文件说明","link":"/config/nav.html"}],"content":"\n        <h1 id=\"菜单配置文件说明\">\n            <a href='#菜单配置文件说明' class='header-anchor'>#</a>\n            <span>菜单配置文件说明</span>\n        </h1>\n    <p>菜单的配置文件是你文档根目录下面的 <code>tree.md</code> 文件，它采用了markdown语法来进行书写。</p>\n\n        <h2 id=\"菜单结构\">\n            <a href='#菜单结构' class='header-anchor'>#</a>\n            <span>菜单结构</span>\n        </h2>\n    <p>例如，本文档的菜单结构如下：</p>\n<pre class=\"prettyprint language-markdown\"><code>- [介绍](/index)\n- [快速入门](/quick_start)\n- [安装](/install)\n- +配置介绍\n    - [文档目录结构介绍](/config/structure)\n    - [主配置文件说明](/config/main)\n    - [菜单配置文件说明](/config/nav)\n- [markdown模版](/template_markdown)\n- [自定义主题](/custom_theme)\n- [部署](/deploy)</code></pre>\n        <h3 id=\"符号介绍\">\n            <a href='#符号介绍' class='header-anchor'>#</a>\n            <span>符号介绍</span>\n        </h3>\n    <p>语法完全使用markdown里的无序列表定义语法，但是要特别注意以下几点：</p>\n<ul>\n<li><code>[]</code> 里的内容表示菜单的标题，如果不写<code>[]</code>则代表这个菜单没有链接仅作为一个菜单名称。</li>\n<li><code>()</code> 里的内容表示菜单的markdown文件的地址，<code>并且也代表了生成后的html文件url。</code></li>\n<li><code>+</code> 代表了在生成的html里默认展开这个菜单，需要注意的是，这不是markdown的语法，这是teadocs的规定，<code>+</code>一定要写在文本的前面，而不是<code>[</code>的前面。</li>\n</ul>\n"},{"context":[{"title":"markdown模版","link":"/template_markdown.html"}],"content":"\n        <h1 id=\"markdown模版\">\n            <a href='#markdown模版' class='header-anchor'>#</a>\n            <span>markdown模版</span>\n        </h1>\n    <p>你编写的markdown文件可以使用内置的ejs模版引擎，比如我们可以轻而易举的写个循环，像这样：</p>\n<pre class=\"prettyprint language-javascript\"><code>&amp;lt; % [1,2,3,4].forEach(function () { % &amp;gt;\n- 欢迎使用Teadocs文档生成工具\n&amp;lt; % }) % &amp;gt;</code></pre><p>效果：</p>\n<p>&lt;% [1,2,3,4].forEach(function () { %&gt;</p>\n<ul>\n<li>欢迎使用Teadocs文档生成工具<br>&lt;% }) %&gt;</li>\n</ul>\n"},{"context":[{"title":"自定义主题","link":"/custom_theme.html"}],"content":"\n        <h1 id=\"自定义主题\">\n            <a href='#自定义主题' class='header-anchor'>#</a>\n            <span>自定义主题</span>\n        </h1>\n    <p>你可以构建自己的主题文件，只要符合Teadocs的主题规范，具体可以自行参考默认主题。</p>\n\n        <h2 id=\"如何使用自己构建的主题？\">\n            <a href='#如何使用自己构建的主题？' class='header-anchor'>#</a>\n            <span>如何使用自己构建的主题？</span>\n        </h2>\n    <p>在 teadocs.config.js 文件的 theme.dir 配置项中指定你的自定义主题路径就可以了。</p>\n"},{"context":[{"title":"部署","link":"/deploy.html"}],"content":"\n        <h1 id=\"部署\">\n            <a href='#部署' class='header-anchor'>#</a>\n            <span>部署</span>\n        </h1>\n    \n        <h2 id=\"上传到github\">\n            <a href='#上传到github' class='header-anchor'>#</a>\n            <span>上传到github</span>\n        </h2>\n    <p>可以你的文档源文件上传到github上，使用 .gitignore 屏蔽 ./build 目录。</p>\n\n        <h2 id=\"上传到服务器\">\n            <a href='#上传到服务器' class='header-anchor'>#</a>\n            <span>上传到服务器</span>\n        </h2>\n    <p>建议使用nginx等静态服务器软件搭建一个静态服务器进行访问即可。</p>\n"}];

  var escapeHtml = function (html) {
    let str = html;
    str = str.replace(/&/g, '&amp;');
    str = str.replace(/</g, '&lt;');
    str = str.replace(/>/g, '&gt;');
    str = str.replace(/"/g, '&quot;');
    str = str.replace(/'/g, '&#039;');
    return str;
  }

  var clearHtml = function (html) {
    let str = html;
    str = str.replace(/&amp;/g, '');
    str = str.replace(/&lt;/g, '');
    str = str.replace(/&gt;/g, '');
    str = str.replace(/&quot;/g, '');
    str = str.replace(/&#039;/g, '');
    return str;
  }

  var randStr = function () {
    return Math.random().toString(36).substr(2);
  };

  var findTitle = function (ele) {
    var findPrevs = function (ele) {
      var children = $(ele).parent().children();
      var prevs = [];
      var findIt = false;
      children = Array.prototype.slice.call(children);
      children.forEach(function (subEle) {
        if ($(subEle).is($(ele))) {
          findIt = true;
        }
        if (findIt === false && $(subEle).text() != "") {
          prevs.push(subEle);
        }
      });
      return prevs;
    };

    var findH = function (eles) {
      var _eles = Array.prototype.slice.call(eles);
      _eles.reverse();
      var title = "";
      var id = "";
      _eles.forEach(function (item) {
        if (!title) {
          if (item.nodeName[0] === "H") {
            title = $(item).text();
            id = $(item).attr("id");
          }
        }
      });
      return {
        text: title,
        id: id
      };
    };
    var prevs = findPrevs(ele);
    if (prevs.length) {
      return findH(prevs);
    }
  };

  window.searchData = function (keyword) {
    var searchResult = [];
    content.forEach(function (item, index) {
      var tempHtml = "<div id='" + randStr() + "'></div>";
      var tempEle = $(tempHtml);
      var findArray = [];
      tempEle.html(clearHtml(item.content));
      findArray = tempEle.find(":contains('" + keyword + "')");
      findArray = Array.prototype.slice.call(findArray);
      if (findArray.length) {
        findArray.forEach(function (ele) {
          var findContent = $(ele).text();
          findContent = findContent[0] === "<" ? $(findContent).text() : findContent;
          findContent = escapeHtml(findContent);
          findContent = findContent.replace(new RegExp(keyword, 'g'), "<b>" + keyword + "</b>");
          var hObj = findTitle(ele);
          if (hObj) {
            searchResult.push({
              context: item.context,
              title: hObj.text,
              hid: hObj.id,
              findContent: findContent
            });
          }
        });
      }
    });
    return searchResult;
  };
})();